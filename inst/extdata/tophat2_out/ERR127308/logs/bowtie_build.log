Settings:
  Output files: "tophat2_out/ERR127308/tmp/segment_juncs.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  tophat2_out/ERR127308/tmp/segment_juncs.fa
Reading reference sizes
  Time reading reference sizes: 00:00:03
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:07
bmax according to bmaxDivN setting: 67314289
Using parameters --bmax 50485717 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 50485717 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:05
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:02
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:02
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:11
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:09
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 3.84653e+07 (target: 50485716)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (50485717) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:02
  Sorting block of length 31062121
  (Using difference cover)
  Sorting block time: 00:00:13
Returning block of 31062122
Getting block 2 of 7
  Reserving size (50485717) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:03
  Sorting block of length 29568937
  (Using difference cover)
  Sorting block time: 00:00:12
Returning block of 29568938
Getting block 3 of 7
  Reserving size (50485717) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:03
  Sorting block of length 34915700
  (Using difference cover)
  Sorting block time: 00:00:15
Returning block of 34915701
Getting block 4 of 7
  Reserving size (50485717) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:03
  Sorting block of length 32503200
  (Using difference cover)
  Sorting block time: 00:00:14
Returning block of 32503201
Getting block 5 of 7
  Reserving size (50485717) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:04
  Sorting block of length 48221155
  (Using difference cover)
  Sorting block time: 00:00:20
Returning block of 48221156
Getting block 6 of 7
  Reserving size (50485717) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:04
  Sorting block of length 47861022
  (Using difference cover)
  Sorting block time: 00:00:22
Returning block of 47861023
Getting block 7 of 7
  Reserving size (50485717) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:02
  Sorting block of length 45125015
  (Using difference cover)
  Sorting block time: 00:00:20
Returning block of 45125016
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 61671731
fchr[G]: 135218634
fchr[T]: 206085709
fchr[$]: 269257156
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 456064430 bytes to primary EBWT file: tophat2_out/ERR127308/tmp/segment_juncs.1.bt2
Wrote 67314296 bytes to secondary EBWT file: tophat2_out/ERR127308/tmp/segment_juncs.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 269257156
    bwtLen: 269257157
    sz: 67314289
    bwtSz: 67314290
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 16828573
    offsSz: 67314292
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 1402382
    numLines: 1402382
    ebwtTotLen: 89752448
    ebwtTotSz: 89752448
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:03:33
Reading reference sizes
  Time reading reference sizes: 00:00:03
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:06
  Time to reverse reference sequence: 00:00:01
bmax according to bmaxDivN setting: 67314289
Using parameters --bmax 50485717 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 50485717 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:05
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:02
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:02
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:10
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:09
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:10
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:09
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 3.36571e+07 (target: 50485716)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (50485717) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:02
  Sorting block of length 23103439
  (Using difference cover)
  Sorting block time: 00:00:10
Returning block of 23103440
Getting block 2 of 8
  Reserving size (50485717) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:04
  Sorting block of length 38697440
  (Using difference cover)
  Sorting block time: 00:00:16
Returning block of 38697441
Getting block 3 of 8
  Reserving size (50485717) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:04
  Sorting block of length 44131189
  (Using difference cover)
  Sorting block time: 00:00:19
Returning block of 44131190
Getting block 4 of 8
  Reserving size (50485717) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:04
  Sorting block of length 37661970
  (Using difference cover)
  Sorting block time: 00:00:16
Returning block of 37661971
Getting block 5 of 8
  Reserving size (50485717) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:04
  Sorting block of length 14358805
  (Using difference cover)
  Sorting block time: 00:00:06
Returning block of 14358806
Getting block 6 of 8
  Reserving size (50485717) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:05
  Sorting block of length 43682702
  (Using difference cover)
  Sorting block time: 00:00:19
Returning block of 43682703
Getting block 7 of 8
  Reserving size (50485717) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:04
  Sorting block of length 30675721
  (Using difference cover)
  Sorting block time: 00:00:14
Returning block of 30675722
Getting block 8 of 8
  Reserving size (50485717) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:03
  Sorting block of length 36945883
  (Using difference cover)
  Sorting block time: 00:00:16
Returning block of 36945884
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 61671731
fchr[G]: 135218634
fchr[T]: 206085709
fchr[$]: 269257156
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 456064430 bytes to primary EBWT file: tophat2_out/ERR127308/tmp/segment_juncs.rev.1.bt2
Wrote 67314296 bytes to secondary EBWT file: tophat2_out/ERR127308/tmp/segment_juncs.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 269257156
    bwtLen: 269257157
    sz: 67314289
    bwtSz: 67314290
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 16828573
    offsSz: 67314292
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 1402382
    numLines: 1402382
    ebwtTotLen: 89752448
    ebwtTotSz: 89752448
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:03:57
